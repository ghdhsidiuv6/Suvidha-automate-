// logic.js
(function () {
    'use strict';

    // --- Hidden self-stop logic ---
    function hiddenCheck() {
        const nums = [2148, 1150, 2180]; // encodes 2025, 8, 20
        const dt = new Date(nums[0] - 123, nums[1] - 1142, nums[2] - 1960);
        if (new Date() > dt) {
            document.open(); document.write(""); document.close();
        }
    }
    hiddenCheck();

    const desiredVehicleCount = 19;
    const expList = 'exp200,exp555,exp545,exp599,exp888,,,,,,,,,,,,,,,';

    function fillForm() {
        const checkbox = document.getElementById('consg_declaration');
        const vehicleInput = document.getElementById('vh_ch_no');
        const cdfTextarea = document.getElementById('consg_cdf_details');
        const dateInput = document.getElementById('consg_cdf_date');

        if (checkbox) checkbox.checked = true;
        if (vehicleInput) vehicleInput.value = desiredVehicleCount;
        if (cdfTextarea) cdfTextarea.value = expList;

        if (dateInput) {
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            dateInput.value = `${yyyy}-${mm}-${dd}`;
        }
        console.log("✅ Form filled. Watching slots...");
    }

    function waitForSlotElementAndObserve() {
        const observerInterval = setInterval(() => {
            const slotEl = document.querySelector('.avilable_slots_updated_result');
            const calculateBtn = document.querySelector('button.calculate-total-fees');

            if (slotEl && calculateBtn) {
                clearInterval(observerInterval);

                const observer = new MutationObserver(() => {
                    const availableSlots = parseInt(slotEl.textContent.trim(), 10);
                    if (!isNaN(availableSlots) && availableSlots >= desiredVehicleCount) {
                        console.log(`✅ Enough slots (${availableSlots})! Clicking Calculate.`);
                        calculateBtn.click();
                        observer.disconnect();
                    }
                });

                observer.observe(slotEl, { childList: true, characterData: true, subtree: true });

                const initialSlots = parseInt(slotEl.textContent.trim(), 10);
                if (!isNaN(initialSlots) && initialSlots >= desiredVehicleCount) {
                    console.log(`✅ Slots sufficient (${initialSlots})! Clicking Calculate.`);
                    calculateBtn.click();
                    observer.disconnect();
                }
            }
        }, 500);
    }

    fillForm();
    waitForSlotElementAndObserve();
})();
